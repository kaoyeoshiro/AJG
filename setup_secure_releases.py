#!/usr/bin/env python3
"""
Script para configurar releases seguros no GitHub
"""

import os
import subprocess
import sys

def check_requirements():
    """Verifica se os requisitos est√£o atendidos"""
    print("üîç Verificando requisitos...")

    # Verificar se est√° em um reposit√≥rio Git
    try:
        subprocess.run(["git", "status"], check=True, capture_output=True)
        print("‚úÖ Reposit√≥rio Git detectado")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Este n√£o √© um reposit√≥rio Git ou Git n√£o est√° instalado")
        return False

    # Verificar se tem origin remoto
    try:
        result = subprocess.run(["git", "remote", "get-url", "origin"],
                              check=True, capture_output=True, text=True)
        origin = result.stdout.strip()
        if "github.com" in origin:
            print(f"‚úÖ GitHub origin detectado: {origin}")
        else:
            print(f"‚ö†Ô∏è Origin n√£o √© do GitHub: {origin}")
    except subprocess.CalledProcessError:
        print("‚ùå Remote 'origin' n√£o configurado")
        return False

    # Verificar arquivos necess√°rios
    required_files = [
        "main_exe.py",
        "config.py",
        "requirements.txt",
        "RelatorioTJMS.spec"
    ]

    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} encontrado")
        else:
            print(f"‚ùå {file} n√£o encontrado")
            return False

    return True

def setup_workflow():
    """Configura o workflow do GitHub Actions"""
    print("\nüîß Configurando workflow GitHub Actions...")

    # Criar diret√≥rio se n√£o existir
    workflow_dir = ".github/workflows"
    os.makedirs(workflow_dir, exist_ok=True)

    workflow_file = os.path.join(workflow_dir, "build-release.yml")
    if os.path.exists(workflow_file):
        print(f"‚úÖ Workflow j√° existe: {workflow_file}")
    else:
        print(f"‚ùå Workflow n√£o encontrado: {workflow_file}")
        print("Execute o script de cria√ß√£o do workflow primeiro!")
        return False

    return True

def create_first_release():
    """Cria a primeira release/tag"""
    print("\nüè∑Ô∏è Configurando primeira release...")

    # Verificar se j√° existe alguma tag
    try:
        result = subprocess.run(["git", "tag"], capture_output=True, text=True)
        existing_tags = result.stdout.strip().split('\n') if result.stdout.strip() else []

        if existing_tags and existing_tags[0]:
            print(f"‚úÖ Tags existentes: {', '.join(existing_tags)}")
            return True

    except subprocess.CalledProcessError:
        pass

    # Criar primeira tag
    version = "v1.0.0"
    try:
        # Criar tag
        subprocess.run(["git", "tag", "-a", version, "-m", f"Release {version}"], check=True)
        print(f"‚úÖ Tag {version} criada")

        # Push da tag
        confirm = input(f"\nüöÄ Fazer push da tag {version} para o GitHub? (y/N): ")
        if confirm.lower() == 'y':
            subprocess.run(["git", "push", "origin", version], check=True)
            print(f"‚úÖ Tag {version} enviada para o GitHub")
            print("\nüéâ Release ser√° compilada automaticamente pelo GitHub Actions!")
        else:
            print("‚ÑπÔ∏è Para criar a release depois, execute: git push origin v1.0.0")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar tag: {e}")
        return False

    return True

def show_next_steps():
    """Mostra os pr√≥ximos passos"""
    print("\n" + "="*60)
    print("üéØ PR√ìXIMOS PASSOS")
    print("="*60)

    print("\n1. üîê CONFIGURAR ASSINATURA DIGITAL (Opcional):")
    print("   - Obtenha um certificado de code signing")
    print("   - Configure os secrets no GitHub:")
    print("     * CERTIFICATE_BASE64")
    print("     * CERTIFICATE_PASSWORD")
    print("   - Veja CERTIFICADO_DIGITAL.md para detalhes")

    print("\n2. üìã CONFIGURAR SECRETS NECESS√ÅRIOS:")
    print("   - V√° em Settings ‚Üí Secrets and variables ‚Üí Actions")
    print("   - Adicione OPENROUTER_API_KEY (ou mantenha placeholder)")

    print("\n3. üöÄ CRIAR RELEASES:")
    print("   - Para release manual: GitHub ‚Üí Releases ‚Üí Create a new release")
    print("   - Para release autom√°tica: git tag v1.0.1 && git push origin v1.0.1")

    print("\n4. üìñ DOCUMENTAR PARA USU√ÅRIOS:")
    print("   - Adicione DOWNLOAD_SEGURO.md ao README")
    print("   - Instrua sobre Windows Defender")
    print("   - Mencione verifica√ß√£o de checksums")

    print("\n5. üîç MONITORAR:")
    print("   - Acompanhe builds no GitHub Actions")
    print("   - Teste downloads em m√°quinas limpas")
    print("   - Monitore feedback dos usu√°rios")

    print("\n" + "="*60)
    print("‚úÖ CONFIGURA√á√ÉO COMPLETA!")
    print("="*60)

def main():
    print("üîí CONFIGURADOR DE RELEASES SEGUROS")
    print("="*40)

    if not check_requirements():
        print("\n‚ùå Alguns requisitos n√£o foram atendidos.")
        print("Corrija os problemas e execute novamente.")
        sys.exit(1)

    if not setup_workflow():
        print("\n‚ùå Falha na configura√ß√£o do workflow.")
        sys.exit(1)

    if not create_first_release():
        print("\n‚ùå Falha na cria√ß√£o da primeira release.")
        sys.exit(1)

    show_next_steps()

if __name__ == "__main__":
    main()