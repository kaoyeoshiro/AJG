name: Build and Release EXE

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create release after build'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=6.0.0

    - name: Verify config and dependencies
      run: |
        python -c "import config; print('Config loaded successfully')"
        python -c "import requests; print(f'Requests version: {requests.__version__}')"
        python -c "import urllib3; print(f'urllib3 version: {urllib3.__version__}')"
        python -c "import certifi; print(f'certifi version: {certifi.__version__}')"
        python -c "from PyInstaller.utils.hooks import collect_submodules, collect_data_files; print('PyInstaller hooks available')"

    - name: Create version file
      id: version
      run: |
        $version = if ($env:GITHUB_REF -match "refs/tags/(.*)") { $matches[1] } else { "v1.0.$env:GITHUB_RUN_NUMBER" }
        $version | Out-File -FilePath "VERSION" -Encoding utf8 -NoNewline
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Build executable
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || 'GITHUB_BUILD_PLACEHOLDER' }}
      run: |
        python scripts/build.py

    - name: Sign executable (if certificate available)
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      run: |
        if ($env:CERTIFICATE_BASE64) {
          Write-Output "üîê Assinando execut√°vel digitalmente..."

          # Decode certificate
          $cert_bytes = [System.Convert]::FromBase64String($env:CERTIFICATE_BASE64)
          $cert_path = "certificate.p12"
          [System.IO.File]::WriteAllBytes($cert_path, $cert_bytes)

          # Install Windows SDK if not present
          if (-not (Test-Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe")) {
            Write-Output "Instalando Windows SDK..."
            choco install windows-sdk-10-version-2004-all
          }

          # Find signtool
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" | Sort-Object Name -Descending | Select-Object -First 1

          if ($signtool) {
            # Sign the executable
            & $signtool.FullName sign /f $cert_path /p $env:CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist/AJG.exe"

            if ($LASTEXITCODE -eq 0) {
              Write-Output "‚úÖ Execut√°vel assinado com sucesso!"

              # Verify signature
              & $signtool.FullName verify /pa "dist/AJG.exe"
            } else {
              Write-Warning "‚ö†Ô∏è Falha na assinatura digital"
            }
          } else {
            Write-Warning "‚ö†Ô∏è signtool n√£o encontrado"
          }

          # Clean up certificate
          Remove-Item $cert_path -Force -ErrorAction SilentlyContinue
        } else {
          Write-Output "‚ÑπÔ∏è Certificado n√£o configurado - execut√°vel n√£o ser√° assinado"
          Write-Output "Para assinatura digital, configure os secrets CERTIFICATE_BASE64 e CERTIFICATE_PASSWORD"
        }

    - name: Generate checksums and security info
      run: |
        # Generate checksums
        $exe_path = "dist/AJG.exe"
        $hash_sha256 = Get-FileHash $exe_path -Algorithm SHA256
        $hash_sha1 = Get-FileHash $exe_path -Algorithm SHA1
        $hash_md5 = Get-FileHash $exe_path -Algorithm MD5

        # Get file info
        $file_info = Get-Item $exe_path
        $size_mb = [math]::Round($file_info.Length / 1MB, 2)

        # Check if signed
        $is_signed = $false
        try {
          $signature = Get-AuthenticodeSignature $exe_path
          $is_signed = $signature.Status -eq 'Valid'
        } catch {
          $is_signed = $false
        }

        # Create security report with simple concatenation
        $version = "${{ steps.version.outputs.version }}"
        $buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
        $commit = "${{ github.sha }}"

        if ($is_signed) {
          $signatureStatus = "* **Assinatura Digital:** V√°lida"
        } else {
          $signatureStatus = "* **Assinatura Digital:** N√£o assinado"
        }

        # Create security report content
        $content = "# Relat√≥rio de Seguran√ßa - AJG.exe`n`n"
        $content += "**Vers√£o:** $version`n"
        $content += "**Data de Build:** $buildDate`n"
        $content += "**Commit:** $commit`n"
        $content += "**Tamanho:** $size_mb MB`n`n"
        $content += "## Verifica√ß√µes de Seguran√ßa`n`n"
        $content += "* **Build Automatizado:** Compilado no GitHub Actions`n"
        $content += "* **Fonte Aberta:** C√≥digo dispon√≠vel para auditoria`n"
        $content += "* **Checksums:** Inclu√≠dos para verifica√ß√£o`n"
        $content += "$signatureStatus`n`n"
        $content += "## Checksums para Verifica√ß√£o`n`n"
        $content += "``````n"
        $content += "SHA256: $($hash_sha256.Hash)`n"
        $content += "SHA1: $($hash_sha1.Hash)`n"
        $content += "MD5: $($hash_md5.Hash)`n"
        $content += "``````n`n"
        $content += "## Como Verificar`n`n"
        $content += "### PowerShell:`n"
        $content += "``````powershell`n"
        $content += "Get-FileHash AJG.exe -Algorithm SHA256`n"
        $content += "``````n`n"
        $content += "### Command Prompt:`n"
        $content += "``````cmd`n"
        $content += "certutil -hashfile AJG.exe SHA256`n"
        $content += "``````n`n"
        $content += "## Se Windows Defender Bloquear`n`n"
        $content += "1. Clique em 'Mais informa√ß√µes'`n"
        $content += "2. Clique em 'Executar assim mesmo'`n"
        $content += "3. Ou adicione exce√ß√£o permanente`n`n"
        $content += "## Por que √© Seguro`n`n"
        $content += "- C√≥digo-fonte aberto no GitHub`n"
        $content += "- Build reproduz√≠vel no GitHub Actions`n"
        $content += "- Checksums verific√°veis`n`n"
        $content += "## Suporte`n`n"
        $content += "- Issues: https://github.com/${{ github.repository }}/issues`n"
        $content += "- C√≥digo: https://github.com/${{ github.repository }}`n"

        $content | Out-File -FilePath "dist/SECURITY.md" -Encoding UTF8

        # Create simple checksum file
        "$($hash_sha256.Hash) *AJG.exe" | Out-File -FilePath "dist/SHA256SUMS" -Encoding ASCII

        Write-Output "Checksums e relat√≥rio de seguran√ßa gerados"

    - name: Copy version to dist
      run: |
        Copy-Item "VERSION" "dist/VERSION"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AJG-${{ steps.version.outputs.version }}
        path: |
          dist/AJG.exe
          dist/VERSION
          dist/SECURITY.md
          dist/SHA256SUMS

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: AJG ${{ steps.version.outputs.version }}
        body: |
          # üöÄ Sistema AJG - Assist√™ncia Judici√°ria Gratuita ${{ steps.version.outputs.version }}

          ## üì• Download Principal

          **‚¨áÔ∏è [AJG.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/AJG.exe)** - Execut√°vel para Windows

          ## üîí Seguran√ßa e Verifica√ß√£o

          ‚úÖ **Build Automatizado** - Compilado no GitHub Actions (ambiente audit√°vel)
          ‚úÖ **C√≥digo Aberto** - Todo o c√≥digo dispon√≠vel para auditoria
          ‚úÖ **Checksums Inclu√≠dos** - Para verifica√ß√£o de integridade
          ‚úÖ **Assinatura Digital** - Veja o relat√≥rio de seguran√ßa para detalhes

          ### üìã Arquivos de Verifica√ß√£o:
          - **[SECURITY.md](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/SECURITY.md)** - Relat√≥rio completo de seguran√ßa
          - **[SHA256SUMS](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/SHA256SUMS)** - Checksums para verifica√ß√£o

          ## üõ°Ô∏è Se o Windows Defender Bloquear

          **Isso √© NORMAL** para execut√°veis Python compilados. O arquivo √© seguro:

          1. **Clique em "Mais informa√ß√µes"** na tela de bloqueio
          2. **Clique em "Executar assim mesmo"**
          3. **Ou adicione exce√ß√£o permanente:**
             - Windows Security ‚Üí Prote√ß√£o contra v√≠rus ‚Üí Exclus√µes
             - Adicione o arquivo AJG.exe

          ### üîç Verificar Integridade (Opcional):
          ```powershell
          Get-FileHash AJG.exe -Algorithm SHA256
          ```
          Compare com o hash no arquivo SHA256SUMS.

          ## ‚öôÔ∏è Configura√ß√£o Necess√°ria

          **IMPORTANTE:** Configure sua chave OpenRouter:
          1. Obtenha uma chave em: https://openrouter.ai/keys
          2. Use o bot√£o "‚öôÔ∏è Configurar Chave" no programa
          3. Ou edite config.py (linha 57)

          ## ‚ú® Informa√ß√µes da Vers√£o

          - **Build:** #${{ github.run_number }}
          - **Commit:** ${{ github.sha }}
          - **Data:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
          - **Tamanho:** Veja no relat√≥rio de seguran√ßa

          ## üìû Suporte

          - üêõ **Reportar Problemas:** [Issues](https://github.com/${{ github.repository }}/issues)
          - üìñ **C√≥digo-fonte:** [GitHub](https://github.com/${{ github.repository }})
          - üìö **Documenta√ß√£o:** [Wiki](https://github.com/${{ github.repository }}/wiki)

          ---
          ü§ñ **Build automatizado e seguro via GitHub Actions**
        files: |
          dist/AJG.exe
          dist/SECURITY.md
          dist/SHA256SUMS
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}